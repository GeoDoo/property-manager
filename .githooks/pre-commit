#!/bin/bash

# Pre-commit hook to enforce technology standards

echo "Running pre-commit hook to check tech stack compliance..."

# Check for Maven files in backend
if [[ -f backend/pom.xml ]]; then
  echo "ERROR: Maven pom.xml found in backend directory!"
  echo "This project uses Gradle only. Please remove Maven files."
  echo "See TECH_STACK.md for project standards."
  exit 1
fi

# Check for Maven dependencies in build.gradle
if grep -q "mavenCentral" backend/build.gradle; then
  # This is actually okay since we're using mavenCentral as a repository
  :
else
  # Check for actual Maven plugin usage
  if grep -q "maven" backend/build.gradle | grep -v "mavenCentral"; then
    echo "WARNING: Maven-related configuration found in build.gradle."
    echo "This project uses Gradle only. See TECH_STACK.md for project standards."
    echo "Commit will proceed, but please review your changes."
  fi
fi

# Check for Redux in frontend
if grep -q "'redux\|@reduxjs/toolkit" frontend/package.json; then
  echo "ERROR: Redux dependency found in package.json!"
  echo "This project uses React Query for state management."
  echo "See TECH_STACK.md for project standards."
  exit 1
fi

# Check for jQuery in frontend
if grep -q "jquery" frontend/package.json; then
  echo "ERROR: jQuery dependency found in package.json!"
  echo "This project uses native DOM methods, not jQuery."
  echo "See TECH_STACK.md for project standards."
  exit 1
fi

# Check for other disallowed frontend dependencies (can be expanded)
DISALLOWED_DEPS=("styled-components" "emotion" "sass" "less")
for dep in "${DISALLOWED_DEPS[@]}"; do
  if grep -q "\"$dep\"" frontend/package.json; then
    echo "ERROR: Disallowed dependency '$dep' found in package.json!"
    echo "This project uses TailwindCSS for styling."
    echo "See TECH_STACK.md for project standards."
    exit 1
  fi
done

# Check for hardcoded secrets and credentials in code
echo "Checking for potential hardcoded secrets..."

# Common patterns that might indicate hardcoded secrets
SECRET_PATTERNS=(
  "password\s*=\s*['\"][^'\"]+['\"]"
  "secret\s*=\s*['\"][^'\"]+['\"]"
  "key\s*=\s*['\"][^'\"]+['\"]"
  "token\s*=\s*['\"][^'\"]+['\"]"
  "apiKey\s*=\s*['\"][^'\"]+['\"]"
  "api_key\s*=\s*['\"][^'\"]+['\"]"
)

# Directories to exclude from check
EXCLUDE_DIRS=(".git" "node_modules" "build" "target" ".gradle")
EXCLUDE_PATTERN=$(printf " --exclude-dir=%s" "${EXCLUDE_DIRS[@]}")

# Check for secrets in the codebase
for pattern in "${SECRET_PATTERNS[@]}"; do
  # Using quotes around pattern and adding || true to prevent grep exit code from causing script to exit
  results=$(grep -r -E -i "$pattern" $EXCLUDE_PATTERN --include="*.java" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.properties" --include="*.yml" --include="*.yaml" . | grep -v "\\\${" | grep -v ".env" | grep -v "example" || true)
  
  if [[ -n "$results" ]]; then
    echo "WARNING: Potential hardcoded secret found:"
    echo "$results"
    echo ""
    echo "SECURITY VIOLATION: Move secrets to .env file and reference them as environment variables."
    echo "See TECH_STACK.md security standards section."
    echo ""
    echo "Commit will proceed, but please review and fix these issues."
  fi
done

echo "Tech stack compliance check passed!"
exit 0 